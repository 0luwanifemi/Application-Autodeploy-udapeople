version: 2.1

commands:
    destroy-env:
      description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
      parameters:
        workflow_id:
          type: string
          default: ${CIRCLE_WORKFLOW_ID:0:7}  
      steps:
        - run:
            name: Destroy environments
            when: on_fail
            command: |
              aws cloudformation delete-stack --stack-name "udapeople-backend-<< parameters.workflow_id >>"
              aws s3 rb s3://udapeople-<< parameters.workflow_id >> --recursive
              aws cloudformation delete-stack --stack-name "udapeople-frontend-<< parameters.workflow_id >>"
              
    
jobs:

    build_frontend:
      
      docker:
          - image: circleci/node:13.8.0
      steps:
          - checkout
          - restore_cache:
              keys: [frontend-build]
          - run:
              name: Build front-end
              command: |
                cd frontend
                npm install
                npm run build
          - save_cache:
              paths: [frontend/node_modules]
              key: frontend-build

    build_backend:
      
      docker:
          - image: circleci/node:13.8.0
      steps:
          - checkout
          - restore_cache:
              keys: [backend-build]
          - run:
              name: Build back-end
              command: |
                cd backend
                npm install
                npm run build
          - save_cache:
              paths: [backend/node_modules]
              key: backend-build

    test_frontend:

      docker:
          - image: circleci/node:13.8.0
      steps:
          - checkout
          - restore_cache:
              keys: [frontend-build]
          - run:
              name: Run Frontend Test
              command: |
                cd frontend
                npm install
                npm run test

    test_backend:

      docker:
          - image: circleci/node:13.8.0
      steps:
          - checkout
          - restore_cache:
              keys: [backend-build]
          - run:
              name: Scan Backend
              command: |
                cd backend
                npm install
                npm run test

    scan_frontend: 

      docker:
          - image: circleci/node:13.8.0
      steps:
          - checkout
          - restore_cache:
                keys: [frontend-build]
          - run:
                name: Scan frontend
                command: |
                  cd frontend
                  npm install
                  npm audit fix --audit-level=critical --force

    scan_backend: 

      docker:
          - image: circleci/node:13.8.0
      steps:
          - checkout
          - restore_cache:
                keys: [backend-build]
          - run:
                name: Scan Backend
                command: |
                  cd backend
                  npm install
                  npm audit fix --audit-level=critical --force

    deploy-infrastructure:

      docker: 
          - image: amazon/aws-cli
      steps:
          - checkout
          - run:
              name: Install tar and gz package
              command: |
                yum install -y tar gzip
          - run:
              name: Ensure backend infrastructure exists
              command: |
                aws cloudformation deploy \
                --template-file .circleci/files/backend.yml \
                --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                --tags project=udapeople 
          - run:
              name: Ensure frontend infrastructure exists
              command: |
                aws cloudformation deploy \
                --template-file .circleci/files/backend.yml \
                --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                --tags project=udapeople
          - run:
              name: Add the EC2 instance IP to the Ansible inventory
              command: |
                aws ec2 describe-instances \
                  --query 'Reservations[*].Instances[*].PublicIpAddress' \
                  --output text >> inventory.txt
          - persist_to_workspace:
              root: ~/
              paths:
                - project/.circleci/ansible/inventory.txt
          - destroy-env



          



workflows:

  default:
    
    jobs:
      - build_frontend
      - build_backend
      - test_frontend:
          requires: 
            - build_frontend
      - test_backend:
          requires:
            - build_backend
      - scan_frontend:
          requires: 
            - build_frontend
      - scan_backend:
          requires:
            - build_backend
      - deploy-infrastructure:
          requires: [test_frontend, test_backend, scan_frontend, scan_backend]
