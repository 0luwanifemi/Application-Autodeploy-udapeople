version: 2.1

commands:
    destroy-env:
      description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
      parameters:
          workflow_id:
            type: string
          event:
            type: string        
      steps:
        - run:
            name: Destroy environment << parameters.workflow_id >>
            when: on_fail
            command: |
              echo "Destroying environment: << parameters.workflow_id >>"
              aws s3 rm s3://udapeople-<< parameters.workflow_id >> --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-<< parameters.workflow_id >>"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-<< parameters.workflow_id >>"

    revert-migrations:
      description: Revert the last migration
      parameters:
          workflow_id:
              type: string  
              default: ${CIRCLE_WORKFLOW_ID:0:7}    
      steps:
          - run:
              name: Revert migrations
              when: on_fail
              command: |
                  SUCCESS=$(curl --insecure  https://kvdb.io/NNBzigyMxCZ1QA9EWe6qJy/migration_<< parameters.workflow_id >>)
                  #Logic for reverting the database state
                  if (( $SUCCESS == 1 ));
                    then
                      cd ~/project/backend
                      npm install
                      npm run build
                      npm run migration:revert
                  fi
              
    
jobs:

    build_frontend:
      
      docker:
          - image: cimg/node:13.8.0
      steps:
          - checkout
          - restore_cache:
              keys: [frontend-build]
          - run:
              name: Build front-end
              command: |
                cd frontend
                npm install
                npm run build
          - save_cache:
              paths: [frontend/node_modules]
              key: frontend-build

    build_backend:
      
      docker: 
          - image: cimg/node:13.8.0
      steps:
          - checkout
          - restore_cache:
              keys: [backend-build]
          - run:
              name: Build back-end
              command: |
                cd backend
                npm install
                npm run build
          - save_cache:
              paths: [backend/node_modules]
              key: backend-build

    test_frontend:

      docker:
          - image: cimg/node:13.8.0
      steps:
          - checkout
          - restore_cache:
              keys: [frontend-build]
          - run:
              name: Run Frontend Test
              command: |
                cd frontend
                npm install
                npm run test

    test_backend:

      docker:
          - image: cimg/node:13.8.0
      steps:
          - checkout
          - restore_cache:
              keys: [backend-build]
          - run:
              name: Scan Backend
              command: |
                cd backend
                npm install
                npm run test

    scan_frontend: 

      docker:
          - image: cimg/node:13.8.0
      steps:
          - checkout
          - restore_cache:
                keys: [frontend-build]
          - run:
                name: Scan frontend
                command: |
                  cd frontend
                  npm install
                  npm audit fix --audit-level=critical --force

    scan_backend: 

      docker:
          - image: cimg/node:13.8.0
      steps:
          - checkout
          - restore_cache:
                keys: [backend-build]
          - run:
                name: Scan Backend
                command: |
                  cd backend
                  npm install
                  npm audit fix --audit-level=critical --force

    deploy-infrastructure:

      docker: 
          - image: amazon/aws-cli
      steps:
          - checkout
          - run:
              name: Install tar and gz package
              command: |
                yum install -y tar gzip
          - run:
              name: Ensure backend infrastructure exists
              command: |
                aws cloudformation deploy \
                  --template-file .circleci/files/backend.yml \
                  --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                  --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                  --tags project=udapeople 
          - run:
              name: Ensure frontend infrastructure exists
              command: |
                aws cloudformation deploy \
                  --template-file .circleci/files/frontend.yml \
                  --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
                  --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                  --tags project=udapeople
          - run:
              name: Add the EC2 instance IP to the Ansible inventory
              command: |
                aws ec2 describe-instances \
                  --query 'Reservations[*].Instances[*].PublicIpAddress' \
                  --output text >> ./.circleci/ansible/inventory.txt
                cat ./.circleci/ansible/inventory.txt
          - persist_to_workspace:
              root: ~/
              paths:
                - project/.circleci/ansible/inventory.txt
          - destroy-env:
              workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
              event: on_fail

    configure-infrastructure:

        docker: 
            - image: python:3.10-alpine3.16
        steps:
            - checkout
            - add_ssh_keys:
                fingerprints: ["87:ea:4b:b3:be:67:e5:c4:d3:d1:98:ff:88:1c:1b:ac"]
            - attach_workspace: 
                at: ~/
            - run:
                name: Install dependencies
                command: |
                  apk add --update ansible aws-cli nodejs npm
            - run:
                name: Configure server
                command: |
                  echo ENVIRONMENT=production > backend/.env
                  echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> backend/.env
                  echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> backend/.env
                  echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> backend/.env
                  echo TYPEORM_HOST=$TYPEORM_HOST >> backend/.env
                  echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> backend/.env
                  echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> backend/.env
                  echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> backend/.env
                  echo TYPEORM_PORT=$TYPEORM_PORT >> backend/.env
                  echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> backend/.env
                  cat backend/.env
                  cd .circleci/ansible
                  cat inventory.txt
                  ansible-playbook -i inventory.txt configure-server.yml
            - destroy-env:
                workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
                event: on_fail

    run-migrations: 

        docker:
            - image: cimg/node:13.8.0
        steps:
            - checkout
            - run:
                name: Install AWS CLI v2
                command: |
                    curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
                    unzip awscliv2.zip
                    sudo ./aws/install
            - restore_cache:
                keys: [backend-build]
            - run:    
                name: Run Migrations
                command: |
                  cd backend
                  npm install
                  npm run build
                  # Run and save the migration output
                  npm run migrations > migrations_dump.txt
                  ls -al
                  cat migrations_dump.txt
                  
                  #Send migration results to kvdb
                  if grep -q "migrations" ~/project/backend/migrations_dump.txt
                  then
                      echo "Database migration has been executed successfully"
                      curl https://kvdb.io/NNBzigyMxCZ1QA9EWe6qJy/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
                  else
                      return 1
                  fi
            - destroy-env:
                workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
                event: on_fail

    deploy-frontend:

        docker: 
            - image: python:3.10-alpine3.16
        steps:
            - checkout    
            - attach_workspace: 
                at: ~/
            - restore_cache:
                keys: [frontend-build]
            - run:
                name: Install dependencies
                command: |
                  apk add --update --no-cache tar gzip nodejs npm ansible curl aws-cli
            - run:
                name: Get backend url
                command: |
                  export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
                  export API_URL="http://${BACKEND_IP}:3030"
                  echo "API_URL = ${API_URL}"
                  echo "API_URL=http://${BACKEND_IP}:3030" >> frontend/.env
                  cat frontend/.env
            - run:
                name: Deploy frontend objects
                command: |
                  cd frontend
                  npm install
                  npm run build
                  tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
                  aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            - persist_to_workspace:
                    root: .
                    paths:
                      - ./frontend/dist
            - destroy-env:
                workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
                event: on_fail
            - revert-migrations:
                workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
                    
    deploy-backend:
        docker:
            - image: python:3.10-alpine3.16
        steps:
            - checkout
            - restore_cache:
                  keys: [backend-build]
            - add_ssh_keys:
                  fingerprints: ["87:ea:4b:b3:be:67:e5:c4:d3:d1:98:ff:88:1c:1b:ac"]
            - attach_workspace: 
                  at: ~/
            - run:
                name: Install dependencies
                command: |
                  apk add --update nodejs npm
                  apk add --update --no-cache tar gzip ansible curl aws-cli
            - run:
                name: Deploy backend
                command: |
                  cd backend
                  npm install
                  npm run build
                  cd ..
                  # Zip the directory
                  tar -C backend -czvf artifact.tar.gz .
                  mkdir -p ~/project/.circleci/ansible/roles/deploy/files/
                  mv artifact.tar.gz .circleci/ansible/roles/deploy/files/artifact.tar.gz
                  cd .circleci/ansible
                  echo "Contents  of the inventory.txt file is -------"
                  cat inventory.txt
                  ansible-playbook -i inventory.txt deploy-backend.yml
            - destroy-env:
                    workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
                    event: on_fail
            - revert-migrations:
                  workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

    smoke-test:
        docker:
            - image: alpine:latest
        steps:
            - checkout
            - run:
                name: Install dependencies
                command: |
                  apk add --update --no-cache ansible curl aws-cli
            - run:
                name: Backend smoke test
                command: |
                  #get backend url
                  export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
                  export API_URL="http://${BACKEND_IP}:3030" 
                  echo "${API_URL}"
                  if curl "${API_URL}/api/status" | grep "ok" 
                  then
                    return 0
                  else
                    return 1
                  fi
            - run:
                name: Frontend smoke test.
                command: |
                  URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"
                  echo ${URL}
                  if curl -s $URL | grep "Welcome"
                  then
                    return 0
                  else
                    return 1 
                  fi
            - destroy-env:
                workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
                event: on_fail
            - revert-migrations:
                workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

    cloudfront-update:
        docker:
            - image: amazon/aws-cli
        steps:
            - checkout
            - run: 
                name: Install dependencies
                command: |
                    yum install tar gzip npm nodejs -y       
            - run:
                name: Update cloudfront distribution
                command: |
                    export OldWorkflowID=$(aws cloudformation list-exports \
                    --query "Exports[?Name==\`WorkflowID\`].Value" \
                    --no-paginate --output text)
                    echo $OldWorkflowID >> ~/OldWorkflowID.txt
                    cat ~/OldWorkflowID.txt

                    aws cloudformation deploy \
                    --template-file .circleci/files/cloudfront.yml \
                    --stack-name InitialStack \
                    --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
                    --tags project=udapeople

                    echo OldWorkflowID=${OldWorkflowID}
                    echo Current Workflow ID: ${CIRCLE_WORKFLOW_ID:0:7}
                        
            - destroy-env:
                workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
                event: on_fail
            - revert-migrations:
                workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

    clean-up:
        docker:
            - image: amazon/aws-cli
        steps:
            - checkout
            - run:
                name: Get old stacks workflow id and delete old stack
                command: | 
                    # Fetch the Old workflow ID
                    echo "udapeople-95cb7913155a80e7" > ~/OldWorkflowID.txt
                    cat ~/OldWorkflowID.txt
                    export OldWorkflowID=$(cat ~/OldWorkflowID.txt)
                    echo OldWorkflowID: "${OldWorkflowID}"
                    echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
                    
                    # Fetch the stack names          
                    export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                            --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
                    echo Stack names: "${STACKS[@]}" 
                    
                    # delete old stack

                    if [[ "${CIRCLE_WORKFLOW_ID:0:7}" != "${OldWorkflowID}" ]]
                    then
                            echo "Delete Stack in progress"
                            aws s3 rm "s3://${OldWorkflowID}" --recursive
                            #aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
                            #aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
                            
                        else
                            echo ------------ Warning!! Cannot cleanup stacks -------------
                    fi

workflows:

    default:
      
      jobs:
        - build_frontend
        - build_backend
        - test_frontend:
            requires: 
              - build_frontend
        - test_backend:
            requires:
              - build_backend
        - scan_frontend:
            requires: 
              - build_frontend
        - scan_backend:
            requires:
              - build_backend
        - deploy-infrastructure:
            requires: [test_frontend, test_backend, scan_frontend, scan_backend]
            filters:
                branches:
                    only: [main]              
        - configure-infrastructure:
            requires: [deploy-infrastructure]
        - run-migrations:
            requires: [configure-infrastructure]
        - deploy-frontend:
            requires: [run-migrations]
        - deploy-backend:
            requires: [run-migrations]
        - smoke-test:
            requires: [deploy-backend, deploy-frontend]
        - cloudfront-update:
            requires: [smoke-test]
        - clean-up:
            requires: [cloudfront-update]